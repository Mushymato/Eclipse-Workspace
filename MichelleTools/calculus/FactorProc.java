package calculus;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

public class FactorProc {
	ExpressionProc eProc = new ExpressionProc();

	/**
	 * returns (ax+bx)(cx+dx) as a Collection<double[]>
	 * 
	 * @param expr
	 * @return
	 */
	private List<double[]> factorFormat(String expr) {
		// Splits the string into polynomial sequences
		Collection<String> temp = new ArrayList<>();
		do {
			expr = expr.substring(expr.indexOf("(") + 1);
			temp.add(expr.substring(0, expr.indexOf(")")));
		} while (expr.indexOf("(") != -1);

		// Adds double[] generated by the getValues method into a collection
		List<double[]> value = new ArrayList<>();
		Iterator<String> it = temp.iterator();
		do {
			value.add(eProc.getValues((String) it.next()));
		} while (it.hasNext());

		// returns the collection
		return value;
	}

	private double[] factorExpand(double[] seqA, double[] seqB) {
		double[] value = new double[(seqA.length - 1) + (seqB.length - 1) + 1];
		for (int i = 0; i < seqA.length; i++) {
			for (int j = 0; j < seqB.length; j++) {
				value[i + j] = seqA[i] * seqB[j] + value[i + j];
			}
		}
		return value;
	}
	
	public double[] openBrackets(String expr){
		List<double[]> values = factorFormat(expr);
		for (int i = values.size()-1; i > 0; i--) {
			values.set(i-1, factorExpand(values.get(i), values.get(i-1)));
		}
		return values.get(0);
	}

	public static void main(String[] args) {
		FactorProc fProc = new FactorProc();
		// fProc.factorFormat("(2x+3)(4x^2+x)");
		double[] seqA = { 1, 1, 1 };
		double[] seqB = { 2, 4, };
		double[] vale = fProc.factorExpand(seqA, seqB);
		for (int i = 0; i < vale.length; i++) {
			System.out.println(vale[i] + "x^" + i);
		}
	}
}
